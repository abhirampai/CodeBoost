{"version":3,"sources":["Apis/axios.js","Apis/runCode.js","Components/CodeEditor/utils.js","Components/CodeEditor/index.jsx","Components/CustomInput/index.jsx","Components/LanguageSelector/constants.js","Components/LanguageSelector/index.jsx","Components/OutputTerminal/index.jsx","Components/utils.js","Components/contants.js","Components/CustomInput/Header.jsx","Components/OutputTerminal/Header.jsx","Apis/refactorCode.js","Components/Main.jsx","Hooks/useSubmissionsApi.js","Hooks/useRefactorApi.js","App.js","index.js"],"names":["axiosOptions","baseURL","params","base64_encoded","fields","headers","Authorization","concat","process","REACT_APP_OPEN_AI_KEY","REACT_APP_JUDGE0_KEY","axios","create","payload","post","token","get","mapLanguages","value","javascript","python","java","rust","c","cpp","go","StreamLanguage","define","ruby","bash","shell","CodeEditor","_ref","selectedLanguage","onChange","editable","runCode","extensions","keymap","of","key","run","_toConsumableArray","defaultKeymap","cm","spaces","Array","getOption","join","replaceSelection","EditorView","lineWrapping","_jsx","_Fragment","children","CodeMirror","theme","sublime","instance","height","basicSetup","CustomInput","input","setInput","className","LANGUAGE_OPTIONS","title","label","stub","LanguageSelector","setSelectedLanguage","Select","isSearchable","name","placeholder","options","selectedOption","OutputTerminal","output","encodeString","str","window","btoa","unescape","encodeURIComponent","decodeString","decodeURIComponent","escape","atob","OUTPUT_STATUES","DEFAULT_OUTPUT_VALUE","data","status","CustomInputHeader","clearInput","_jsxs","type","onClick","OutputTerminalHeader","clearOutput","Main","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","setValue","_useState5","_useState6","_useState7","_useState8","setOutput","_useState9","_useState10","isLoading","setIsLoading","useMutation","mutateAsync","getOutput","getRefactoredCode","refactorCode","useEffect","runEditorCode","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$runCode","submissionData","_yield$getOutput","outputData","wrap","_context","prev","next","source_code","language_id","stdin","sent","status_id","assoc","stdout","stderr","t0","console","log","finish","stop","apply","arguments","_ref2","_callee2","_yield$getRefactoredC","chatGptOutput","refactoredCode","_context2","model","messages","role","content","choices","message","toLowerCase","disabled","e","target","queryClient","QueryClient","App","QueryClientProvider","client","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.014f90c3.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst axiosOptions = {\n  baseURL: \"https://judge0-ce.p.rapidapi.com/\",\n  params: { base64_encoded: \"true\", fields: \"*\" },\n  headers: {\n    \"content-type\": \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${process.env.REACT_APP_OPEN_AI_KEY}`,\n    \"X-RapidAPI-Key\": process.env.REACT_APP_JUDGE0_KEY,\n    \"X-RapidAPI-Host\": \"judge0-ce.p.rapidapi.com\"\n  }\n};\n\nexport default axios.create(axiosOptions);\n","import axios from \"./axios\";\n\nconst createSubmission = (payload) => axios.post(\"submissions\", payload);\n\nconst getSubmission = (token) => axios.get(`/submissions/${token}`);\n\nexport default { createSubmission, getSubmission };\n","import { javascript } from \"@codemirror/lang-javascript\";\nimport { python } from \"@codemirror/lang-python\";\nimport { java } from \"@codemirror/lang-java\";\nimport { rust } from \"@codemirror/lang-rust\";\nimport { cpp } from \"@codemirror/lang-cpp\";\nimport { StreamLanguage } from \"@codemirror/language\";\nimport { go } from \"@codemirror/legacy-modes/mode/go\";\nimport { ruby } from \"@codemirror/legacy-modes/mode/ruby\";\nimport { shell } from \"@codemirror/legacy-modes/mode/shell\";\n\nexport const mapLanguages = (value) => {\n  const mappedLanguages = {\n    javascript,\n    python,\n    java,\n    rust,\n    c: cpp,\n    \"c++\": cpp,\n    go: () => StreamLanguage.define(go),\n    ruby: () => StreamLanguage.define(ruby),\n    bash: () => StreamLanguage.define(shell)\n  };\n  return mappedLanguages[value];\n};\n","import CodeMirror from \"@uiw/react-codemirror\";\nimport { keymap } from \"@codemirror/view\";\nimport { sublime } from \"@uiw/codemirror-theme-sublime\";\nimport { defaultKeymap } from \"@codemirror/commands\";\nimport { EditorView } from \"@codemirror/view\";\n\nimport { mapLanguages } from \"./utils\";\n\nconst CodeEditor = ({\n  selectedLanguage,\n  value,\n  onChange,\n  editable,\n  runCode\n}) => {\n  const handleIndentTab = (cm) => {\n    const spaces = Array(cm.getOption(\"indentUnit\") + 1).join(\" \");\n    cm.replaceSelection(spaces);\n  };\n\n  const extensions = [\n    keymap.of([\n      {\n        key: \"Mod-Enter\",\n        run: () => {\n          if (editable) runCode();\n          return true;\n        }\n      },\n      ...defaultKeymap\n    ]),\n    keymap.of([handleIndentTab]),\n    mapLanguages(selectedLanguage)(),\n    EditorView.lineWrapping\n  ];\n\n  const editorHeight = \"calc(100vh - 160px)\";\n\n  return (\n    <>\n      <CodeMirror\n        value={value}\n        extensions={extensions}\n        theme={sublime}\n        onChange={(instance) => onChange(instance)}\n        height={editorHeight}\n        editable={editable}\n        basicSetup={{ defaultKeymap: false }}\n      />\n    </>\n  );\n};\n\nexport default CodeEditor;\n","const CustomInput = ({ input, setInput }) => {\n  return <textarea value={input} onChange={setInput} className=\"mt-2\" />;\n};\n\nexport default CustomInput;\n","export const LANGUAGE_OPTIONS = [\n  {\n    title: \"Bash\",\n    label: \"Bash (5.0.0)\",\n    value: 46,\n    stub: \"\"\n  },\n  {\n    title: \"C\",\n    label: \"C (GCC 9.2.0)\",\n    value: 50,\n    stub:\n      '// C: following is only a sample code snippet to read the input from stdin and may not have anything to do with the question\\n\\n#include <stdio.h>\\n#include <stdbool.h>\\n#include <stdlib.h>\\n\\n#define MAX 255\\n\\nvoid function_name(int arg){\\n  // Write your code here\\n}\\n\\nint main() {\\n\\n  int arg;\\n  scanf(\"%d\", &arg);\\n  function_name(arg);\\n\\n  return 0;\\n}\\n\\n'\n  },\n  {\n    title: \"C++\",\n    label: \"C++ (GCC 9.2.0)\",\n    value: 54,\n    stub:\n      \"// C++: following is only a sample code snippet to read the input from stdin and may not have anything to do with the question\\n\\n#include <iostream>\\n#include <string>\\nusing namespace std;\\n\\nvoid function_name(string arg){\\n  // Write your code here\\n}\\n\\nint main(){\\n\\n  string arg;\\n  getline(cin, arg);\\n  function_name(arg);\\n\\n  return 0;\\n}\\n\\n\"\n  },\n  {\n    title: \"Go\",\n    label: \"Go (1.13.5)\",\n    value: 60,\n    stub: \"\"\n  },\n  {\n    title: \"Java\",\n    label: \"Java (OpenJDK 13.0.1)\",\n    value: 62,\n    stub:\n      \"// Java: following is only a sample code snippet to read the input from stdin and may not have anything to do with the question\\n\\nimport java.util.Scanner;\\n\\nclass Result {\\n  public static void functionName(String arg){\\n    // Write your code here\\n\\n  }\\n}\\n\\nclass Main {\\n  public static void main(String args[]) {\\n    Scanner scanner = new Scanner(System.in);\\n    String arg = scanner.nextLine();\\n\\n    Result.functionName(arg);\\n  }\\n}\\n\"\n  },\n  {\n    title: \"JavaScript\",\n    label: \"JavaScript (Node.js 12.14.0)\",\n    value: 63,\n    stub:\n      '// Default code for reading input data\\nprocess.stdin.resume();\\nprocess.stdin.setEncoding(\"utf-8\");\\nvar stdin = \"\";\\n\\nprocess.stdin.on(\"data\", (input) => {\\n  stdin += input;\\n});\\n\\nprocess.stdin.on(\"end\", () => {\\n  stdin = stdin.split(\\'\\\\n\\');\\n\\n  functionName(stdin);\\n});\\n\\nfunction functionName(stdin_array) {\\n  /**\\n    NOTE: Start modifying below code\\n    if necessary parse input as required in question and\\n    print your program\\'s output using console.log\\n\\n    Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail\\n    Following is only a sample code snippet and may not have anything to do with the question\\n\\n    stdin_array: array of inputs or lines read from stdin\\n  */\\n  console.log(stdin_array);\\n}\\n\\n'\n  },\n  {\n    title: \"Python\",\n    label: \"Python (2.7.17)\",\n    value: 70,\n    stub:\n      \"# Python: following is only a sample code snippet to read the input from stdin and may not have anything to do with the question\\n\\ndef function_name(args):\\n  # Write your code here\\n\\n\\nargs = raw_input().strip()\\nprint(function_name(args))\\n\\n\"\n  },\n  {\n    title: \"Python\",\n    label: \"Python (3.8.1)\",\n    value: 71,\n    stub:\n      \"# Python: following is only a sample code snippet to read the input from stdin and may not have anything to do with the question\\n\\ndef function_name(args):\\n  # Write your code here\\n\\n\\nargs = input().strip()\\nprint(function_name(args))\\n\\n\"\n  },\n  {\n    title: \"Ruby\",\n    label: \"Ruby (2.7.0)\",\n    value: 72,\n    stub:\n      \"# Ruby: following is only a sample code snippet to read the input from stdin and may not have anything to do with the question\\n\\ndef function_name(args)\\n  # Write your code here\\n\\nend\\n\\nargs = gets.chomp\\nprint(function_name(args))\\n\\n\"\n  },\n  {\n    title: \"Rust\",\n    label: \"Rust (1.40.0)\",\n    value: 73,\n    stub: \"\"\n  }\n];\n","import Select from \"react-select\";\nimport { LANGUAGE_OPTIONS } from \"./constants\";\n\nconst LanguageSelector = ({ selectedLanguage, setSelectedLanguage }) => {\n  return (\n    <div className=\"flex\">\n      <Select\n        isSearchable\n        name=\"language\"\n        placeholder=\"Select a Language\"\n        className=\"w-full\"\n        value={selectedLanguage}\n        options={LANGUAGE_OPTIONS}\n        onChange={(selectedOption) => setSelectedLanguage(selectedOption)}\n      />\n    </div>\n  );\n};\n\nexport default LanguageSelector;\n","const OutputTerminal = ({ output }) => {\n  return (\n    <div className=\"output-terminal-bg output-terminal-height overflow-auto flex flex-col mt-2\">\n      <pre className=\"padding-top-left-1 text-white\">{output}</pre>\n    </div>\n  );\n};\n\nexport default OutputTerminal;\n","export const encodeString = (str) =>\n  window.btoa(unescape(encodeURIComponent(str)));\n\nexport const decodeString = (str) =>\n  decodeURIComponent(escape(window.atob(str)));\n","export const OUTPUT_STATUES = {\n  \"1\": \"In Queue\",\n  \"2\": \"Processing\",\n  \"3\": \"Accepted\",\n  \"4\": \"Wrong Answer\",\n  \"5\": \"Time Limit Exceeded\",\n  \"6\": \"Compilation Error\",\n  \"7\": \"Runtime Error\",\n  \"8\": \"Runtime Error\",\n  \"9\": \"Runtime Error\",\n  \"10\": \"Runtime Error\",\n  \"11\": \"Runtime Error\",\n  \"12\": \"Runtime Error\",\n  \"13\": \"Internal Error\",\n  \"14\": \"Exec Format Error\"\n};\n\nexport const DEFAULT_OUTPUT_VALUE = {\n  data: \"\",\n  status: \"\"\n};\n","const CustomInputHeader = ({ clearInput }) => {\n  return (\n    <div className=\"flex justify-between items-center\">\n      <label className=\"mb-2\">Custom Input</label>\n      <input type=\"button\" value=\"Clear Input\" onClick={clearInput} />\n    </div>\n  );\n};\n\nexport default CustomInputHeader;\n","const OutputTerminalHeader = ({ status, clearOutput }) => {\n  return (\n    <div className=\"flex justify-between\">\n      <label className=\"mb-2\">Output ({status})</label>\n      <input value=\"Clear Ouput\" type=\"button\" onClick={clearOutput} />\n    </div>\n  );\n};\n\nexport default OutputTerminalHeader;\n","import axios from \"./axios\";\n\nconst createCompletion = (payload) =>\n  axios.post(\"https://api.openai.com/v1/chat/completions\", payload);\n\nexport default { createCompletion };\n","import { useEffect, useState } from \"react\";\n\nimport { assoc } from \"ramda\";\n\nimport {\n  useCreateSubmissionsApi,\n  useGetSubmissionsApi\n} from \"../Hooks/useSubmissionsApi\";\nimport CodeEditor from \"./CodeEditor\";\nimport CustomInput from \"./CustomInput\";\nimport LanguageSelector from \"./LanguageSelector\";\nimport { LANGUAGE_OPTIONS } from \"./LanguageSelector/constants\";\nimport OutputTerminal from \"./OutputTerminal\";\nimport { decodeString, encodeString } from \"./utils\";\nimport { OUTPUT_STATUES, DEFAULT_OUTPUT_VALUE } from \"./contants\";\nimport CustomInputHeader from \"./CustomInput/Header\";\nimport OutputTerminalHeader from \"./OutputTerminal/Header\";\nimport { useCreateCompletionApi } from \"../Hooks/useRefactorApi\";\n\nconst Main = () => {\n  const [selectedLanguage, setSelectedLanguage] = useState(LANGUAGE_OPTIONS[0]);\n  const [value, setValue] = useState(selectedLanguage?.stub);\n  const [input, setInput] = useState();\n  const [output, setOutput] = useState(DEFAULT_OUTPUT_VALUE);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { mutateAsync: runCode } = useCreateSubmissionsApi();\n  const { mutateAsync: getOutput } = useGetSubmissionsApi();\n  const { mutateAsync: getRefactoredCode } = useCreateCompletionApi();\n\n  useEffect(() => {\n    setValue(selectedLanguage?.stub);\n  }, [selectedLanguage]);\n\n  const clearInput = () => {\n    setInput(\"\");\n  };\n\n  const handleCustomInputChange = (e) => {\n    const { value } = e.target;\n    setInput(value);\n  };\n\n  const runEditorCode = async () => {\n    try {\n      setIsLoading(true);\n      clearOutput();\n\n      const { data: submissionData } = await runCode({\n        source_code: encodeString(value),\n        language_id: selectedLanguage.value,\n        stdin: encodeString(input || \"\")\n      });\n\n      const { data: outputData } = await getOutput(submissionData?.token);\n\n      if (outputData.status_id === 3) {\n        setOutput(\n          assoc(\"data\", decodeString(outputData.stdout) || \"Empty Ouput\")\n        );\n      } else {\n        setOutput(assoc(\"data\", decodeString(outputData.stderr)));\n      }\n      setOutput(assoc(\"status\", OUTPUT_STATUES[outputData.status_id]));\n    } catch (err) {\n      console.log(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refactorCode = async () => {\n    try {\n      setIsLoading(true);\n\n      const { data: chatGptOutput } = await getRefactoredCode({\n        model: \"gpt-3.5-turbo\",\n        messages: [{ role: \"user\", content: `Refactor code ${value}` }]\n      });\n\n      const refactoredCode = chatGptOutput.choices[0].message.content;\n      setValue(refactoredCode);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearOutput = () => {\n    setOutput(DEFAULT_OUTPUT_VALUE);\n  };\n\n  return (\n    <div className=\"flex flex-col w-full\">\n      <LanguageSelector\n        selectedLanguage={selectedLanguage}\n        setSelectedLanguage={setSelectedLanguage}\n      />\n      <div className=\"editor-height mt-5\">\n        <CodeEditor\n          selectedLanguage={selectedLanguage?.title.toLowerCase()}\n          value={value}\n          onChange={setValue}\n          editable={!isLoading}\n          runCode={runEditorCode}\n        />\n      </div>\n      <div className=\"flex mt-5 justify-end\">\n        <input\n          value=\"Run Code\"\n          type=\"button\"\n          onClick={runEditorCode}\n          disabled={isLoading}\n        />\n        <input\n          value=\"Refactor Code\"\n          type=\"button\"\n          className=\"ml-2\"\n          onClick={refactorCode}\n          disabled={isLoading}\n        />\n      </div>\n      <div className=\"flex flex-col mt-5\">\n        <CustomInputHeader clearInput={clearInput} />\n        <CustomInput input={input} setInput={handleCustomInputChange} />\n      </div>\n      {output.data && (\n        <>\n          <div className=\"flex flex-col mt-5\">\n            <OutputTerminalHeader\n              status={output?.status}\n              clearOutput={clearOutput}\n            />\n            <OutputTerminal output={output?.data} />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Main;\n","import { useMutation } from \"react-query\";\nimport runCode from \"../Apis/runCode\";\n\nconst useCreateSubmissionsApi = () => {\n  return useMutation((payload) => runCode.createSubmission(payload));\n};\n\nconst useGetSubmissionsApi = () => {\n  return useMutation((token) => runCode.getSubmission(token));\n};\n\nexport { useCreateSubmissionsApi, useGetSubmissionsApi };\n","import { useMutation } from \"react-query\";\nimport refactorCode from \"../Apis/refactorCode\";\n\nconst useCreateCompletionApi = () => {\n  return useMutation((payload) => refactorCode.createCompletion(payload));\n};\n\nexport { useCreateCompletionApi };\n","import { QueryClient, QueryClientProvider } from \"react-query\";\nimport Main from \"./Components/Main\";\nimport \"./styles.css\";\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Main />\n    </QueryClientProvider>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}